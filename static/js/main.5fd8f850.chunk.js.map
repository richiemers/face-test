{"version":3,"sources":["components/App.js","index.js"],"names":["App","startCapture","a","interval","setInterval","capture","webcam","current","cam","document","getElementById","image64","getScreenshot","image","remove","canvas","createElement","setAttribute","faceapi","body","append","displaySize","width","height","withFaceLandmarks","withFaceDescriptors","detections","resizedDetections","getContext","clearRect","drawDetections","loadLabeledImages","labeledFaceDescriptors","faceMatcher","map","d","findBestMatch","descriptor","forEach","result","i","box","detection","DrawBox","label","toString","draw","console","log","React","createRef","MODEL_URL","process","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","this","navigator","mediaDevices","enumerateDevices","then","devices","Promise","all","descriptions","img","withFaceDescriptor","push","Paper","style","borderRadius","id","audio","ref","screenshotFormat","Component","ReactDOM","render"],"mappings":"8WAMqBA,E,kDAEjB,aAAe,IAAD,8BACV,gBAkBJC,aAnBc,sBAmBC,sBAAAC,EAAA,sDACX,EAAKC,SAAWC,aAAY,WACxB,EAAKC,YACN,KAHQ,2CAnBD,EA0BdA,QA1Bc,sBA0BJ,4CAAAH,EAAA,0DACF,EAAKI,OAAOC,QADV,wBAGIC,EAAMC,SAASC,eAAe,OAEhCC,EAAU,EAAKL,OAAOC,QAAQK,gBAI9BC,GAAOA,EAAMC,SACbC,GAAQA,EAAOD,UAEnBD,EAAQJ,SAASO,cAAc,QACzBC,aAAa,MAAON,GAE1BI,EAASG,IAA8BV,GAEvCC,SAASU,KAAKC,OAAOL,GAEfM,EAAc,CAChBC,MAAOd,EAAIc,MACXC,OAAQf,EAAIe,QAGhBL,IAAwBH,EAAQM,GAxB9B,UA0BuBH,IAAuBL,EAAO,IAAIK,KAAmCM,oBAAoBC,sBA1BhH,eA0BIC,EA1BJ,OA2BIC,EAAoBT,IAAsBQ,EAAYL,GAE5DN,EAAOa,WAAW,MAAMC,UAAU,EAAG,EAAGrB,EAAIc,MAAOd,EAAIe,QACvDL,IAAaY,eAAef,EAAQY,GA9BlC,UAgCmC,EAAKI,oBAhCxC,QAgCIC,EAhCJ,OAiCIC,EAAc,IAAIf,IAAoBc,EAAwB,IAEpDL,EAAkBO,KAAI,SAAAC,GAAC,OAAIF,EAAYG,cAAcD,EAAEE,eAE/DC,SAAQ,SAACC,EAAQC,GACrB,IAAMC,EAAMd,EAAkBa,GAAGE,UAAUD,IAC3B,IAAIvB,IAAayB,QAAQF,EAAK,CAAEG,MAAOL,EAAOM,aACtDC,KAAK/B,GACbgC,QAAQC,IAAIT,EAAOM,eAzCrB,4CAxBN,EAAKvC,OAAS2C,IAAMC,YAFV,E,wLAMJC,EAAYC,W,SACZlC,IAAamC,iBAAiBC,YAAYH,G,uBAC1CjC,IAAaqC,kBAAkBD,YAAYH,G,uBAC3CjC,IAAasC,mBAAmBF,YAAYH,G,uBAC5CM,KAAKxD,e,6IAGG,IAAD,OACbyD,UAAUC,aAAaC,mBAAmBC,KAA1C,uCAA+C,WAAMC,GAAN,SAAA5D,EAAA,sEACrC,EAAKD,eADgC,2CAA/C,yD,0CA8DA,OAAO8D,QAAQC,IADA,CAAC,UAEL9B,IAAP,uCAAW,WAAMU,GAAN,qBAAA1C,EAAA,sDACD+D,EAAe,GACZzB,EAAI,EAFN,YAESA,GAAK,IAFd,iCAGetB,IAAA,mCAA+C0B,EAA/C,YAAwDJ,EAAxD,SAHf,cAGG0B,EAHH,gBAIsBhD,IAAyBgD,GAAK1C,oBAAoB2C,qBAJxE,OAIGzC,EAJH,OAKHuC,EAAaG,KAAK1C,EAAWW,YAL1B,QAEkBG,IAFlB,gDAOA,IAAItB,IAA+B0B,EAAOqB,IAP1C,4CAAX,0D,+BAaJ,OACI,kBAACI,EAAA,EAAD,CAAOC,MAAO,CAAEC,aAAc,IAC1B,kBAAC,IAAD,CACIC,GAAG,MACHC,OAAO,EACPnD,MAAM,MACNC,OAAO,MACPmD,IAAKjB,KAAKnD,OACVqE,iBAAiB,oB,GApGJC,a,MCAjCC,IAASC,OACL,kBAAC,EAAD,MACArE,SAASC,eAAe,W","file":"static/js/main.5fd8f850.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Paper, Typography } from '@material-ui/core';\r\nimport Webcam from 'react-webcam';\r\n\r\nimport * as faceapi from 'face-api.js';\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.webcam = React.createRef();\r\n    }\r\n\r\n    async componentWillMount() {\r\n        const MODEL_URL = process.env.PUBLIC_URL + '/models';\r\n        await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);\r\n        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\r\n        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\r\n        await this.startCapture();\r\n    }\r\n\r\n    setInputDevice() {\r\n        navigator.mediaDevices.enumerateDevices().then(async devices => {\r\n            await this.startCapture();\r\n        });\r\n    };\r\n\r\n    startCapture = async () => {\r\n        this.interval = setInterval(() => {\r\n            this.capture();\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    capture = async () => {\r\n        if (this.webcam.current) {\r\n\r\n            const cam = document.getElementById('cam');\r\n\r\n            let image64 = this.webcam.current.getScreenshot();\r\n            let image;\r\n            let canvas;\r\n\r\n            if (image) image.remove();\r\n            if (canvas) canvas.remove();\r\n\r\n            image = document.createElement(\"IMG\");\r\n            image.setAttribute('src', image64);\r\n\r\n            canvas = faceapi.createCanvasFromMedia(cam);\r\n\r\n            document.body.append(canvas);\r\n\r\n            const displaySize = {\r\n                width: cam.width,\r\n                height: cam.height\r\n            };\r\n\r\n            faceapi.matchDimensions(canvas, displaySize);\r\n\r\n            const detections = await faceapi.detectAllFaces(image, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n            const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n\r\n            canvas.getContext('2d').clearRect(0, 0, cam.width, cam.height);\r\n            faceapi.draw.drawDetections(canvas, resizedDetections);\r\n\r\n            const labeledFaceDescriptors = await this.loadLabeledImages();\r\n            const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6);\r\n\r\n            const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor));\r\n\r\n            results.forEach((result, i) => {\r\n                const box = resizedDetections[i].detection.box;\r\n                const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() });\r\n                drawBox.draw(canvas);\r\n                console.log(result.toString());\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n\r\n    loadLabeledImages() {\r\n        const labels = ['richie'];\r\n        return Promise.all(\r\n            labels.map(async label => {\r\n                const descriptions = [];\r\n                for (let i = 1; i <= 14; i++) {\r\n                    const img = await faceapi.fetchImage(`https://mmtt.netlify.app/${label}/${i}.jpg`);\r\n                    const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();\r\n                    descriptions.push(detections.descriptor);\r\n                }\r\n                return new faceapi.LabeledFaceDescriptors(label, descriptions);\r\n            })\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Paper style={{ borderRadius: 0 }}>\r\n                <Webcam\r\n                    id=\"cam\"\r\n                    audio={false}\r\n                    width=\"720\"\r\n                    height=\"560\"\r\n                    ref={this.webcam}\r\n                    screenshotFormat=\"image/jpeg\"\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}